#ifndef BLAST_H
#define BLAST_H

/** \file Blast.h
    \brief Contains code for constructing Blast class hierarchy

    The lightning blast is meant to be generated by the player to destroy an enemy
*/
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/Network.hpp>
#include <SFML/Audio.hpp>
/** \class Blast
    \brief Blast is generated by the space key press event.
    Blast is generated at the player position, moves up towards enemies.
    A collision with the top window bound will result in the destruction of the object.
 */
class Blast
{
private:
    //----------------------------------------------------------------------------------------------------------------------
    // LIGHTNING BLAST ATTRIBUTES
    //----------------------------------------------------------------------------------------------------------------------
    sf::CircleShape blastShape;
    float blastSpeed;
    //----------------------------------------------------------------------------------------------------------------------
    // SET UP FUNCTIONS
    //----------------------------------------------------------------------------------------------------------------------
    void setVariables();
    void setBlastShape();

public:
    //----------------------------------------------------------------------------------------------------------------------
    // CONSTRUCTORS AND DESTRUCTORS
    //----------------------------------------------------------------------------------------------------------------------
    Blast();
    /** \brief The constructor for the Blast class
    \param x The starting x position on the window (same as current position of player)
    \param y The starting y position on the window (same as current position of player)
    */
    Blast(float x, float y); //starting position is players position
    virtual ~Blast();
    //----------------------------------------------------------------------------------------------------------------------
    // CALCULATIONS
    //----------------------------------------------------------------------------------------------------------------------
    /** \brief Call to move lighting blast
    */
    void refreshMovement();
    /** \brief Call to check on the collisions with the window
    \return true if blast has passed the top window bound
    */
    bool blastCollisions();
    //----------------------------------------------------------------------------------------------------------------------
    // ACCESSORS
    //----------------------------------------------------------------------------------------------------------------------
    /** \brief This is an accessor for the blast's position
    \return The x and y position of the centre of the blast circle
    */
    sf::Vector2<float> GetPos();
    /** \brief This is an accessor for the circle's global bounds
    \return Global bounds of the circle
    */
    sf::Rect<float> getBlastBounds();
    //----------------------------------------------------------------------------------------------------------------------
    // MODIFIERS
    //----------------------------------------------------------------------------------------------------------------------
    /** \brief This sets circle to a new position
    \param x The desired x position
    \param y The desired y position
    */
    void setPos(float x,float y);
    //----------------------------------------------------------------------------------------------------------------------
    // UPDATE AND RENDER
    //----------------------------------------------------------------------------------------------------------------------
    /** \brief This updates the circle
    \param target The window of the game
    */
    void refresh(sf::RenderTarget* target);
    /** \brief This draws the circle on the window
    \param target The window of the game
    */
    void manifest(sf::RenderTarget* target);
};

#endif // BLAST_H
